if not game:IsLoaded() then
    game.Loaded:Wait()
end

local custom = loadstring(game:HttpGet("https://raw.githubusercontent.com/TheEmptynessProject/EmptynessProject/main/emptynessHub/customFunctions.lua"))()
local notificationLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/TheEmptynessProject/EmptynessProject/main/emptynessHub/notificationLib.lua"))()
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/TheEmptynessProject/EmptynessProject/main/emptynessHub/lib.lua"))()

getgenv().mainLib = library:New({
    Name = "Avex MVSD Hacks",
    SizeX = 500,
    SizeY = 550,
    Log = false,
    LogURL = "https://discord.com/api/webhooks/1131678659384709301/Odi9JMgIU4skKIK9TYf_9JItefj1vl61cr3LQx_0Ad_UHJbEX_WgwsXeUEOvyjaZ6b_g"
})

getgenv().notifLib = notificationLib.new({
    lifetime = 5,
    textColor = Color3.fromRGB(255, 255, 255),
    textSize = 50,
    textStrokeTransparency = 0.7,
    textStrokeColor = Color3.fromRGB(0, 0, 0),
    textFont = Enum.Font.Ubuntu
})

notifLib:BuildUI()

local uniTab = mainLib:NewTab("Universal")

local hitboxTab = mainLib:NewTab("Hitbox")

local universalColumn1 = uniTab:NewSection({ Name = "", column = 1 })
local universalColumn2 = uniTab:NewSection({ Name = "", column = 2 })

local hitboxColumn1 = hitboxTab:NewSection({ Name = "", column = 1 })

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

local HeadSize = 50
local Disabled = false

local function updateHitboxes()
    if not Disabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                pcall(function()
                    local humanoidRootPart = player.Character.HumanoidRootPart
                    humanoidRootPart.Size = Vector3.new(HeadSize, HeadSize, HeadSize)
                    humanoidRootPart.Transparency = 0.7
                    humanoidRootPart.BrickColor = BrickColor.new("Bright red")
                    humanoidRootPart.Material = Enum.Material.Neon
                    humanoidRootPart.CanCollide = false
                end)
            end
        end
    end
end

local function resetHitboxes()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            pcall(function()
                local humanoidRootPart = player.Character.HumanoidRootPart
                humanoidRootPart.Size = Vector3.new(1, 1, 1)
                humanoidRootPart.Transparency = 0
                humanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")
                humanoidRootPart.Material = Enum.Material.Plastic
            end)
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.Zero then
        Disabled = not Disabled
        if Disabled then
            print("Hitbox Disabled")
            resetHitboxes()
        else
            print("Hitbox Enabled")
            updateHitboxes()
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if not Disabled then
        updateHitboxes()
    end
end)

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if not Disabled then
            wait(1)
            updateHitboxes()
        end
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = player.Character.HumanoidRootPart
        rootPart.Size = Vector3.new(1, 1, 1)
        rootPart.Transparency = 0
    end
end)

print("Hitbox Script Loaded! Press '0' to toggle hitbox.")

hitboxColumn1:CreateSlider({
    Name = "Hitbox Size",
    Min = 1,
    Max = 50,
    Default = 50,
    Decimals = 1,
    Callback = function(value)
        HeadSize = value
        if not Disabled then
            updateHitboxes()
        end
    end
})

universalColumn1:CreateKeybind({
    Name = "Hide GUI",
    Default = library.toggleBind,
    Callback = function(key)
        task.wait()
        library.toggleBind = key
    end
})

universalColumn1:CreateKeybind({
    Name = "Close GUI",
    Default = library.closeBind,
    Callback = function(key)
        task.wait()
        library.closeBind = key
    end
})

universalColumn1:CreateButton({
    Name = "Get Place Info",
    Callback = function()
        setclipboard(tostring(game.PlaceId))
    end
})

universalColumn1:CreateButton({
    Name = "Get Self Position",
    Callback = function()
        setclipboard(tostring(game.Players.LocalPlayer.Character.HumanoidRootPart.Position))
    end
})

universalColumn1:CreateLabel({
    Name = "Teleport to Player"
})

local dropdownPlayerArray = {}
for _, player in ipairs(game.Players:GetPlayers()) do
    table.insert(dropdownPlayerArray, player.DisplayName)
end

local tempDropPLAYERTP = universalColumn1:CreateDropdown({
    Content = dropdownPlayerArray,
    MultiChoice = false,
    Callback = function(selectedPlayer)
        local targetPlayer = nil
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player.DisplayName == selectedPlayer then
                targetPlayer = player
                break
            end
        end

        if targetPlayer then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
        else
            notifLib:Notify("Error", {Color = Color3.new(1, 0, 0)})
        end
    end
})

universalColumn1:CreateToggle({
    Name = "Disable Invisible Parts",
    Callback = function(bool)
        for i, v in pairs(workspace:GetDescendants()) do
            if v:IsA("BasePart") and v.Transparency == 1 and v.CanCollide then
                if bool then
                    v.CanCollide = false
                else
                    v.CanCollide = true
                end
            end
        end
    end
})

universalColumn1:CreateLine({
    Size = 2,
    Color = Color3.new(255, 0, 255)
})

universalColumn2:CreateToggle_and_Keybind({
    Name = "Hex Spitter Kill All",
    Default = Enum.KeyCode.G,
    Callback = function(bool, key)
        if not bool then
            return
        end
        for _, player in ipairs(game.Players:GetPlayers()) do
            if
                player.Character and player.Character:FindFirstChild("Humanoid") and
                player.Character.Humanoid.Health > 0 and
                not player.Character:FindFirstChildOfClass("ForceField")
            then
                notifLib:Notify(
                    "Player " .. player.Name .. " now has " .. player.Character.Humanoid.Health,
                    {Color = Color3.new(255, 255, 255)}
                )
                local c = {
                    [1] = "RayHit",
                    [2] = {
                        ["Position"] = Vector3.new(0, 0, 0),
                        ["Hit"] = player.Character.HumanoidRootPart
                    }
                }
                game:GetService("Players").LocalPlayer.Character.HexSpitter.Remotes.ServerControl:InvokeServer(unpack(c))
                task.wait()
            end
        end
    end
})

repeat
    task.wait()
until game.Players.LocalPlayer.Character

local coroutineWS
universalColumn2:CreateSlider({
    Name = "WalkSpeed",
    Min = 10,
    Max = 200,
    Default = math.floor(game.Players.LocalPlayer.Character.Humanoid.WalkSpeed) or 10,
    Decimals = 1,
    Callback = function(value)
        if coroutineWS then
            coroutine.close(coroutineWS)
            coroutineWS = nil
        end
        coroutineWS = coroutine.create(function()
            while task.wait() do
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
            end
        end)
        coroutine.resume(coroutineWS)
    end
})

universalColumn2:CreateSlider({
    Name = "JumpPower",
    Min = 10,
    Max = 200,
    Default = math.floor(game.Players.LocalPlayer.Character.Humanoid.JumpPower) or 10,
    Decimals = 1,
    Callback = function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
    end
})

universalColumn2:CreateSlider({
    Name = "Camera Zoom Distance",
    Min = 0,
    Max = 20000,
    Default = math.floor(game.Players.LocalPlayer.CameraMaxZoomDistance) or 0,
    Decimals = 0.001,
    Callback = function(value)
        game.Players.LocalPlayer.CameraMaxZoomDistance = value
    end
})

universalColumn2:CreateSlider({
    Name = "Gravity",
    Min = 0,
    Max = 1000,
    Default = math.floor(game.workspace.Gravity) or 196,
    Decimals = 0.1,
    Callback = function(value)
        game.workspace.Gravity = value
    end
})

universalColumn2:CreateToggle_and_Keybind({
    Default = Enum.KeyCode.Space,
    Name = "Infinite Jump",
    Click = false,
    Callback = function(bool, keyed)
        if bool then
            game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
        end
    end
})

local thing, connectV2_infJump
universalColumn2:CreateToggle_and_Keybind({
    Default = Enum.KeyCode.Space,
    Name = "Infinite Jump V2",
    Click = false,
    Callback = function(bool, keyed)
        if bool then
            if not thing then
                thing = Instance.new("Part")
                thing.Anchored = true
                thing.Parent = game.Workspace
                thing.Size = Vector3.new(5, 0.1, 5)
                thing.Transparency = 1
            end

            if not connectV2_infJump then
                connectV2_infJump = game:GetService("RunService").RenderStepped:Connect(function()
                    local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    thing.CFrame = CFrame.new(pos.X, pos.Y - 3.3, pos.Z)
                end)
            end
        else
            if thing then
                thing:Destroy()
                thing = nil
            end
            if connectV2_infJump then
                connectV2_infJump:Disconnect()
                connectV2_infJump = nil
            end
        end
    end
})

local connection_noclip
universalColumn2:CreateToggle_and_Keybind({
    Default = Enum.KeyCode.N,
    Name = "Noclip",
    Click = true,
    Callback = function(bool, toggled, keyed)
        local player = game.Players.LocalPlayer
        local function setNoclipEnabled(enabled)
            for _, part in ipairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not enabled
                end
            end
        end
        local on = bool and toggled
        if on then
            if not connection_noclip then
                connection_noclip = game:GetService("RunService").Stepped:Connect(function()
                    setNoclipEnabled(true)
                end)
            end
        else
            if connection_noclip then
                connection_noclip:Disconnect()
                connection_noclip = nil
            end
            setNoclipEnabled(false)
        end
    end
})

local connectionFly, bodyVelocity
universalColumn2:CreateToggle_and_Keybind({
    Default = Enum.KeyCode.G,
    Name = "Fly",
    Click = true,
    Info = "Also works as Vehicle Fly",
    Mode = 2,
    Callback = function(bool, toggled, keyed)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")

        local flying = toggled and bool
        local flySpeed = 0
        local flyMaxSpeed = 500
        local mouse = player:GetMouse()

        local function updateFlySpeed()
            if flySpeed < flyMaxSpeed then
                flySpeed = flySpeed + 1
            end
        end

        local function getMovementDirection()
            local camera = game.Workspace.CurrentCamera
            local lookVector = camera.CFrame.LookVector
            local rightVector = camera.CFrame.RightVector
            local flyDirection = Vector3.new(0, 0, 0)

            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
                flyDirection = flyDirection + lookVector
            end
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
                flyDirection = flyDirection - lookVector
            end
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
                flyDirection = flyDirection - rightVector
            end
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
                flyDirection = flyDirection + rightVector
            end

            return flyDirection
        end
        if flying then
            connectionFly = game:GetService("RunService").RenderStepped:Connect(function()
                if not flying then
                    return
                end
                if not bodyVelocity then
                    bodyVelocity = Instance.new("BodyVelocity", rootPart)
                    bodyVelocity.MaxForce = Vector3.new(2e10, 2e10, 2e10)
                    updateFlySpeed()
                else
                    game:GetService("TweenService"):Create(
                        bodyVelocity,
                        TweenInfo.new(0.5),
                        {Velocity = getMovementDirection() * flySpeed}
                    ):Play()
                    updateFlySpeed()
                end
            end)
        else
            flySpeed = 0
            if bodyVelocity then
                game:GetService("TweenService"):Create(
                    bodyVelocity,
                    TweenInfo.new(0.5),
                    {Velocity = Vector3.new(0, 0, 0)}
                ):Play()
                bodyVelocity:Destroy()
                bodyVelocity = nil
            end
            if connectionFly then
                connectionFly:Disconnect()
                connectionFly = nil
            end
        end
    end
})

local WSdetectConnect
local lastDetectionTimestamps = {}
universalColumn1:CreateToggle({
    Name = "WalkSpeed Detection",
    Callback = function(bool)
        if bool then
            WSdetectConnect = game:GetService("RunService").RenderStepped:Connect(function()
                local localPlayer = game.Players.LocalPlayer
                local localWalkSpeed = localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") and localPlayer.Character.Humanoid.WalkSpeed

                if not localWalkSpeed then
                    return
                end

                for _, player in pairs(game.Players:GetPlayers()) do
                    pcall(function()
                        local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                        if humanoidRootPart then
                            local temp = Vector2.new(humanoidRootPart.Velocity.X, humanoidRootPart.Velocity.Z)
                            local velo = math.floor(temp.Magnitude)
                            if velo > localWalkSpeed + 5 then
                                local now = tick()
                                local lastDetectionTime = lastDetectionTimestamps[player]
                                if not lastDetectionTime or (now - lastDetectionTime) >= 30 then
                                    lastDetectionTimestamps[player] = now
                                    notifLib:Notify(
                                        "Player " .. player.Name .. " (" .. player.DisplayName .. ")" .. " was detected: " .. velo,
                                        {Color = Color3.new(255, 0, 0)}
                                    )
                                end
                            end
                        end
                    end)
                end
            end)
        else
            if WSdetectConnect then
                WSdetectConnect:Disconnect()
            end
        end
    end
})

local connection_BHOP
universalColumn2:CreateToggle_and_Keybind({
    Default = Enum.KeyCode.F,
    Name = "BHOP",
    Click = true,
    Callback = function(temp, thing, keyed)
        local bool = temp and thing
        if bool then
            connection_BHOP = game:GetService("RunService").Stepped:Connect(function()
                if not bool then
                    return
                end
                if game.Players.LocalPlayer.Character.Humanoid.FloorMaterial ~= Enum.Material.Air then
                    game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
                end
            end)
        else
            if connection_BHOP then
                connection_BHOP:Disconnect()
                connection_BHOP = nil
            end
        end
    end
})

universalColumn1:CreateButton({
    Name = "TP Lowest Player Server",
    Callback = function()
        local HttpService = game:GetService("HttpService")
        local request = syn and syn.request or http and http.request or http_request or request or httprequest

        local response = HttpService:JSONDecode(request({
            Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=25",
            Method = "GET"
        }).Body)

        local firstServer = response.data[1]
        if firstServer then
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, firstServer.id, game.Players.LocalPlayer)
        end
    end
})

universalColumn1:CreateButton({
    Name = "TP Highest Player Server",
    Callback = function()
        local HttpService = game:GetService("HttpService")
        local request = syn and syn.request or http and http.request or http_request or request or httprequest

        local response = HttpService:JSONDecode(request({
            Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=25&excludeFullGames=true",
            Method = "GET"
        }).Body)

        local firstServer = response.data[1]
        if firstServer then
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, firstServer.id, game.Players.LocalPlayer)
        end
    end
})

universalColumn1:CreateButton({
    Name = "Rejoin",
    Callback = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
    end
})

local idleConnection
universalColumn1:CreateButton({
    Name = "Anti AFK",
    Info = "Untested",
    Callback = function()
        local Players = game:GetService("Players")
        local idleFunc = Players.LocalPlayer.Idled
        if getconnections then
            local idledConnections = getconnections(idleFunc)
            for _, connection in pairs(idledConnections) do
                if connection ~= idleConnection then
                    if connection.Disable then
                        connection:Disable()
                    elseif connection.Disconnect then
                        connection:Disconnect()
                    end
                else
                    print("Connection Safe")
                end
            end
            if not idleConnection then
                idleConnection = idleFunc:Connect(function()
                    local VirtualUser = game:GetService("VirtualUser")
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end
        else
            warn("Your exploit does not support getconnections function")
        end
    end
})
