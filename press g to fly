
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local flying = false
local flySpeed = 50
local bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.MaxForce = Vector3.new(0, 0, 0)

local function toggleFly()
    flying = not flying
    if flying then
        bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Parent = character.PrimaryPart
        humanoid.PlatformStand = true
    else
        bodyVelocity.MaxForce = Vector3.new(0, 0, 0)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Parent = nil
        humanoid.PlatformStand = false
    end
end

userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.F then -- Change "F" to any key you want
        toggleFly()
    end
end)

runService.Heartbeat:Connect(function()
    if flying then
        local camera = workspace.CurrentCamera
        local direction = Vector3.new(0, 0, 0)

        -- Get the camera's look vector (forward direction)
        local forward = camera.CFrame.LookVector
        local right = camera.CFrame.rightVector
        local up = Vector3.new(0, 1, 0)

        -- Movement based on camera orientation
        if userInputService:IsKeyDown(Enum.KeyCode.W) then
            direction = direction + forward
        end
        if userInputService:IsKeyDown(Enum.KeyCode.S) then
            direction = direction - forward
        end
        if userInputService:IsKeyDown(Enum.KeyCode.A) then
            direction = direction - right
        end
        if userInputService:IsKeyDown(Enum.KeyCode.D) then
            direction = direction + right
        end
        if userInputService:IsKeyDown(Enum.KeyCode.Space) then
            direction = direction + up
        end
        if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            direction = direction - up
        end

      
        if direction.Magnitude > 0 then
            direction = direction.Unit
        end

     
        bodyVelocity.Velocity = direction * flySpeed

        
        local rootPart = character.PrimaryPart
        if rootPart then
            -- Get the camera's pitch (up/down rotation)
            local cameraPitch = camera.CFrame:ToEulerAnglesYXZ()
            -- Create a new CFrame for the rootPart that matches the camera's pitch
            rootPart.CFrame = CFrame.new(rootPart.Position) * CFrame.Angles(0, cameraPitch.Y, 0)
        end
    end
end)
